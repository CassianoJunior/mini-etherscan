/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Mini Etherscan ***DEV***
 * OpenAPI spec version: 0.1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  TransactionResponse
} from '../miniEtherscanDEV.schemas';


export const getGetTransactionByHashTransactionsTransactionHashGetResponseMock = (overrideResponse: Partial< TransactionResponse > = {}): TransactionResponse => ({transaction_hash: faker.string.alpha({length: {min: 10, max: 20}}), transaction_index: faker.number.int({min: undefined, max: undefined}), block_hash: faker.string.alpha({length: {min: 10, max: 20}}), block_number: faker.number.int({min: undefined, max: undefined}), timestamp: faker.number.int({min: undefined, max: undefined}), nonce: faker.number.int({min: undefined, max: undefined}), status: faker.string.alpha({length: {min: 10, max: 20}}), from: faker.string.alpha({length: {min: 10, max: 20}}), to: faker.string.alpha({length: {min: 10, max: 20}}), value: faker.number.int({min: undefined, max: undefined}), transaction_fee: faker.number.int({min: undefined, max: undefined}), gas: faker.number.int({min: undefined, max: undefined}), gas_price: faker.number.int({min: undefined, max: undefined}), input: faker.string.alpha({length: {min: 10, max: 20}}), v: faker.number.int({min: undefined, max: undefined}), swap_details: faker.helpers.arrayElement([{hash: faker.string.alpha({length: {min: 10, max: 20}}), block_number: faker.number.int({min: undefined, max: undefined}), log_index: faker.number.int({min: undefined, max: undefined}), transaction_index: faker.number.int({min: undefined, max: undefined}), from: faker.string.alpha({length: {min: 10, max: 20}}), to: faker.string.alpha({length: {min: 10, max: 20}}), token_in: faker.string.alpha({length: {min: 10, max: 20}}), token_out: faker.string.alpha({length: {min: 10, max: 20}}), amount_in: faker.string.alpha({length: {min: 10, max: 20}}), amount_out: faker.string.alpha({length: {min: 10, max: 20}}), gas_price: faker.string.alpha({length: {min: 10, max: 20}}), dex_name: faker.string.alpha({length: {min: 10, max: 20}})},null,]), ...overrideResponse})

export const getFetchLatestTransactionsTransactionsGetResponseMock = (): TransactionResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({transaction_hash: faker.string.alpha({length: {min: 10, max: 20}}), transaction_index: faker.number.int({min: undefined, max: undefined}), block_hash: faker.string.alpha({length: {min: 10, max: 20}}), block_number: faker.number.int({min: undefined, max: undefined}), timestamp: faker.number.int({min: undefined, max: undefined}), nonce: faker.number.int({min: undefined, max: undefined}), status: faker.string.alpha({length: {min: 10, max: 20}}), from: faker.string.alpha({length: {min: 10, max: 20}}), to: faker.string.alpha({length: {min: 10, max: 20}}), value: faker.number.int({min: undefined, max: undefined}), transaction_fee: faker.number.int({min: undefined, max: undefined}), gas: faker.number.int({min: undefined, max: undefined}), gas_price: faker.number.int({min: undefined, max: undefined}), input: faker.string.alpha({length: {min: 10, max: 20}}), v: faker.number.int({min: undefined, max: undefined}), swap_details: faker.helpers.arrayElement([{hash: faker.string.alpha({length: {min: 10, max: 20}}), block_number: faker.number.int({min: undefined, max: undefined}), log_index: faker.number.int({min: undefined, max: undefined}), transaction_index: faker.number.int({min: undefined, max: undefined}), from: faker.string.alpha({length: {min: 10, max: 20}}), to: faker.string.alpha({length: {min: 10, max: 20}}), token_in: faker.string.alpha({length: {min: 10, max: 20}}), token_out: faker.string.alpha({length: {min: 10, max: 20}}), amount_in: faker.string.alpha({length: {min: 10, max: 20}}), amount_out: faker.string.alpha({length: {min: 10, max: 20}}), gas_price: faker.string.alpha({length: {min: 10, max: 20}}), dex_name: faker.string.alpha({length: {min: 10, max: 20}})},null,])})))


export const getGetTransactionByHashTransactionsTransactionHashGetMockHandler = (overrideResponse?: TransactionResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TransactionResponse> | TransactionResponse)) => {
  return http.get('*/transactions/:transactionHash', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetTransactionByHashTransactionsTransactionHashGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getFetchLatestTransactionsTransactionsGetMockHandler = (overrideResponse?: TransactionResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TransactionResponse[]> | TransactionResponse[])) => {
  return http.get('*/transactions/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getFetchLatestTransactionsTransactionsGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getTransactionsMock = () => [
  getGetTransactionByHashTransactionsTransactionHashGetMockHandler(),
  getFetchLatestTransactionsTransactionsGetMockHandler()
]
