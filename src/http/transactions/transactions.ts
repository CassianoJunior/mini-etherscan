/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Mini Etherscan ***DEV***
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  FetchLatestTransactionsTransactionsGetParams,
  HTTPValidationError,
  TransactionResponse
} from '../miniEtherscanDEV.schemas';

import { api } from '../../lib/axios';
import type { ErrorType } from '../../lib/axios';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search for a transaction by hash.
 */
export const getTransactionByHashTransactionsTransactionHashGet = (
    transactionHash: string,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<TransactionResponse>(
      {url: `/transactions/${transactionHash}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTransactionByHashTransactionsTransactionHashGetQueryKey = (transactionHash: string,) => {
    return [`/transactions/${transactionHash}`] as const;
    }

    
export const getGetTransactionByHashTransactionsTransactionHashGetQueryOptions = <TData = Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>, TError = ErrorType<void | HTTPValidationError>>(transactionHash: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTransactionByHashTransactionsTransactionHashGetQueryKey(transactionHash);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>> = ({ signal }) => getTransactionByHashTransactionsTransactionHashGet(transactionHash, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(transactionHash), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTransactionByHashTransactionsTransactionHashGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>>
export type GetTransactionByHashTransactionsTransactionHashGetQueryError = ErrorType<void | HTTPValidationError>


export function useGetTransactionByHashTransactionsTransactionHashGet<TData = Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>, TError = ErrorType<void | HTTPValidationError>>(
 transactionHash: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>,
          TError,
          Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTransactionByHashTransactionsTransactionHashGet<TData = Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>, TError = ErrorType<void | HTTPValidationError>>(
 transactionHash: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>,
          TError,
          Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTransactionByHashTransactionsTransactionHashGet<TData = Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>, TError = ErrorType<void | HTTPValidationError>>(
 transactionHash: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Search for a transaction by hash.
 */

export function useGetTransactionByHashTransactionsTransactionHashGet<TData = Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>, TError = ErrorType<void | HTTPValidationError>>(
 transactionHash: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionByHashTransactionsTransactionHashGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTransactionByHashTransactionsTransactionHashGetQueryOptions(transactionHash,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Fetch the latests transactions.
 */
export const fetchLatestTransactionsTransactionsGet = (
    params?: FetchLatestTransactionsTransactionsGetParams,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<TransactionResponse[]>(
      {url: `/transactions/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getFetchLatestTransactionsTransactionsGetQueryKey = (params?: FetchLatestTransactionsTransactionsGetParams,) => {
    return [`/transactions/`, ...(params ? [params]: [])] as const;
    }

    
export const getFetchLatestTransactionsTransactionsGetQueryOptions = <TData = Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>, TError = ErrorType<void | HTTPValidationError>>(params?: FetchLatestTransactionsTransactionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFetchLatestTransactionsTransactionsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>> = ({ signal }) => fetchLatestTransactionsTransactionsGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FetchLatestTransactionsTransactionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>>
export type FetchLatestTransactionsTransactionsGetQueryError = ErrorType<void | HTTPValidationError>


export function useFetchLatestTransactionsTransactionsGet<TData = Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>, TError = ErrorType<void | HTTPValidationError>>(
 params: undefined |  FetchLatestTransactionsTransactionsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>,
          TError,
          Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFetchLatestTransactionsTransactionsGet<TData = Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>, TError = ErrorType<void | HTTPValidationError>>(
 params?: FetchLatestTransactionsTransactionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>,
          TError,
          Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFetchLatestTransactionsTransactionsGet<TData = Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>, TError = ErrorType<void | HTTPValidationError>>(
 params?: FetchLatestTransactionsTransactionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Fetch the latests transactions.
 */

export function useFetchLatestTransactionsTransactionsGet<TData = Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>, TError = ErrorType<void | HTTPValidationError>>(
 params?: FetchLatestTransactionsTransactionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchLatestTransactionsTransactionsGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFetchLatestTransactionsTransactionsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



