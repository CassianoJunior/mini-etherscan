/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Mini Etherscan ***DEV***
 * OpenAPI spec version: 0.1.0
 */
export interface BlockItem {
  hash: string;
  number: number;
  nonce: string;
  miner: string;
  parent_hash: string;
  timestamp: number;
  status: string;
  size: number;
  gas_used: number;
  base_fee_per_gas: number;
  gas_limit: number;
  difficulty: number;
  total_difficulty: number;
  withdrawals: Withdrawal[];
  extra_data: string;
  transactions_hashes: string[];
}

export interface BlocksResponse {
  blocks: BlockItem[];
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface MultipleSandwichResponse {
  block_number: number;
  sandwiches: SandwichAttack[];
  total_sandwiches: number;
}

export interface SandwichAttack {
  block: number;
  attacker_addr: string;
  victims_addr: string[];
  cost_amount: number;
  gain_amount: number;
  cost_usd: number;
  gain_usd: number;
  swaps: Swaps;
}

export interface SandwichItem {
  attack_group_id: number;
  block_number: string;
  ta1: string;
  tv: string;
  ta2: string;
  swaps: Swap[];
}

export interface SingleSandwichResponse {
  block_number: number;
  sandwiches: SandwichItem[];
  total_sandwiches: number;
}

export type SwapTransitionType = typeof SwapTransitionType[keyof typeof SwapTransitionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SwapTransitionType = {
  attacker: 'attacker',
  victim: 'victim',
} as const;

export interface Swap {
  hash: string;
  from_address: string;
  to_address: string;
  token_in: string;
  token_out: string;
  amount_in: string;
  amount_out: string;
  gas_price: string;
  transition_type: SwapTransitionType;
}

export interface SwapDetails {
  hash: string;
  block_number: number;
  log_index: number;
  transaction_index: number;
  from: string;
  to: string;
  token_in: string;
  token_out: string;
  amount_in: string;
  amount_out: string;
  gas_price: string;
  dex_name: string;
}

export interface SwapEvent {
  to_address: string;
  amount_out: string;
  gas_fee_wei: string;
  gas_price: string;
  gas_fee_eth: string;
  hash: string;
  from_address: string;
  gas_burned: string;
  block_number: string;
  token_in: string;
  gas_tipped: string;
  log_index: number;
  token_in_address: string;
  transaction_index: number;
  token_out: string;
  dex_name: string;
  token_out_address: string;
  amount_in: string;
  gas_used: number;
}

export interface Swaps {
  front_run: SwapEvent[];
  victims: SwapEvent[];
  back_run: SwapEvent[];
}

export type TransactionResponseSwapDetails = SwapDetails | null;

export interface TransactionResponse {
  transaction_hash: string;
  transaction_index: number;
  block_hash: string;
  block_number: number;
  timestamp: number;
  nonce: number;
  status: string;
  from: string;
  to: string;
  value: number;
  transaction_fee: number;
  gas: number;
  gas_price: number;
  input: string;
  v: number;
  swap_details: TransactionResponseSwapDetails;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export interface Withdrawal {
  address: string;
  amount: number;
  index: number;
  validatorIndex: number;
}

export type GetAddressAddressAddressTransactionsGetParams = {
startblock?: number;
endblock?: number;
page?: number;
per_page?: number;
};

export type FetchLatestTransactionsTransactionsGetParams = {
limit?: number;
};

export type FetchBlocksBlocksGetParams = {
/**
 * @minimum 1
 */
page?: number;
/**
 * @minimum 1
 */
per_page?: number;
};

export type GetAddressDangerDatabaseDeleteParams = {
password: string;
};

