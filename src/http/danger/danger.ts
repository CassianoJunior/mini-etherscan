/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Mini Etherscan ***DEV***
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  GetAddressDangerDatabaseDeleteParams,
  HTTPValidationError
} from '../miniEtherscanDEV.schemas';

import { api } from '../../lib/axios';
import type { ErrorType } from '../../lib/axios';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Delete the database and start over
 */
export const getAddressDangerDatabaseDelete = (
    params: GetAddressDangerDatabaseDeleteParams,
 options?: SecondParameter<typeof api>,) => {
      
      
      return api<unknown>(
      {url: `/danger/database`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getGetAddressDangerDatabaseDeleteMutationOptions = <TError = ErrorType<void | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getAddressDangerDatabaseDelete>>, TError,{params: GetAddressDangerDatabaseDeleteParams}, TContext>, request?: SecondParameter<typeof api>}
): UseMutationOptions<Awaited<ReturnType<typeof getAddressDangerDatabaseDelete>>, TError,{params: GetAddressDangerDatabaseDeleteParams}, TContext> => {

const mutationKey = ['getAddressDangerDatabaseDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getAddressDangerDatabaseDelete>>, {params: GetAddressDangerDatabaseDeleteParams}> = (props) => {
          const {params} = props ?? {};

          return  getAddressDangerDatabaseDelete(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetAddressDangerDatabaseDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof getAddressDangerDatabaseDelete>>>
    
    export type GetAddressDangerDatabaseDeleteMutationError = ErrorType<void | HTTPValidationError>

    /**
 * @summary Delete the database and start over
 */
export const useGetAddressDangerDatabaseDelete = <TError = ErrorType<void | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getAddressDangerDatabaseDelete>>, TError,{params: GetAddressDangerDatabaseDeleteParams}, TContext>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof getAddressDangerDatabaseDelete>>,
        TError,
        {params: GetAddressDangerDatabaseDeleteParams},
        TContext
      > => {

      const mutationOptions = getGetAddressDangerDatabaseDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    