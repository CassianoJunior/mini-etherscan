/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Mini Etherscan ***DEV***
 * OpenAPI spec version: 0.1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  BlockItem,
  BlocksResponse,
  MultipleSandwichResponse,
  SingleSandwichResponse
} from '../miniEtherscanDEV.schemas';


export const getFetchBlocksBlocksGetResponseMock = (overrideResponse: Partial< BlocksResponse > = {}): BlocksResponse => ({blocks: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({hash: faker.string.alpha({length: {min: 10, max: 20}}), number: faker.number.int({min: undefined, max: undefined}), nonce: faker.string.alpha({length: {min: 10, max: 20}}), miner: faker.string.alpha({length: {min: 10, max: 20}}), parent_hash: faker.string.alpha({length: {min: 10, max: 20}}), timestamp: faker.number.int({min: undefined, max: undefined}), status: faker.string.alpha({length: {min: 10, max: 20}}), size: faker.number.int({min: undefined, max: undefined}), gas_used: faker.number.int({min: undefined, max: undefined}), base_fee_per_gas: faker.number.int({min: undefined, max: undefined}), gas_limit: faker.number.int({min: undefined, max: undefined}), difficulty: faker.number.int({min: undefined, max: undefined}), total_difficulty: faker.number.int({min: undefined, max: undefined}), withdrawals: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({address: faker.string.alpha({length: {min: 10, max: 20}}), amount: faker.number.int({min: undefined, max: undefined}), index: faker.number.int({min: undefined, max: undefined}), validatorIndex: faker.number.int({min: undefined, max: undefined})})), extra_data: faker.string.alpha({length: {min: 10, max: 20}}), transactions_hashes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}})))})), ...overrideResponse})

export const getGetBlockByNumberBlocksNumberGetResponseMock = (overrideResponse: Partial< BlockItem > = {}): BlockItem => ({hash: faker.string.alpha({length: {min: 10, max: 20}}), number: faker.number.int({min: undefined, max: undefined}), nonce: faker.string.alpha({length: {min: 10, max: 20}}), miner: faker.string.alpha({length: {min: 10, max: 20}}), parent_hash: faker.string.alpha({length: {min: 10, max: 20}}), timestamp: faker.number.int({min: undefined, max: undefined}), status: faker.string.alpha({length: {min: 10, max: 20}}), size: faker.number.int({min: undefined, max: undefined}), gas_used: faker.number.int({min: undefined, max: undefined}), base_fee_per_gas: faker.number.int({min: undefined, max: undefined}), gas_limit: faker.number.int({min: undefined, max: undefined}), difficulty: faker.number.int({min: undefined, max: undefined}), total_difficulty: faker.number.int({min: undefined, max: undefined}), withdrawals: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({address: faker.string.alpha({length: {min: 10, max: 20}}), amount: faker.number.int({min: undefined, max: undefined}), index: faker.number.int({min: undefined, max: undefined}), validatorIndex: faker.number.int({min: undefined, max: undefined})})), extra_data: faker.string.alpha({length: {min: 10, max: 20}}), transactions_hashes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), ...overrideResponse})

export const getFetchSandwichesAttackByBlockNumberBlocksNumberSandwichGetResponseMock = (overrideResponse: Partial< SingleSandwichResponse > = {}): SingleSandwichResponse => ({block_number: faker.number.int({min: undefined, max: undefined}), sandwiches: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({attack_group_id: faker.number.int({min: undefined, max: undefined}), block_number: faker.string.alpha({length: {min: 10, max: 20}}), ta1: faker.string.alpha({length: {min: 10, max: 20}}), tv: faker.string.alpha({length: {min: 10, max: 20}}), ta2: faker.string.alpha({length: {min: 10, max: 20}}), swaps: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({hash: faker.string.alpha({length: {min: 10, max: 20}}), from_address: faker.string.alpha({length: {min: 10, max: 20}}), to_address: faker.string.alpha({length: {min: 10, max: 20}}), token_in: faker.string.alpha({length: {min: 10, max: 20}}), token_out: faker.string.alpha({length: {min: 10, max: 20}}), amount_in: faker.string.alpha({length: {min: 10, max: 20}}), amount_out: faker.string.alpha({length: {min: 10, max: 20}}), gas_price: faker.string.alpha({length: {min: 10, max: 20}}), transition_type: faker.helpers.arrayElement(['attacker','victim'] as const)}))})), total_sandwiches: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getFetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGetResponseMock = (overrideResponse: Partial< MultipleSandwichResponse > = {}): MultipleSandwichResponse => ({block_number: faker.number.int({min: undefined, max: undefined}), sandwiches: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({block: faker.number.int({min: undefined, max: undefined}), attacker_addr: faker.string.alpha({length: {min: 10, max: 20}}), victims_addr: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), cost_amount: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), gain_amount: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), cost_usd: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), gain_usd: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), swaps: {front_run: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({to_address: faker.string.alpha({length: {min: 10, max: 20}}), amount_out: faker.string.alpha({length: {min: 10, max: 20}}), gas_fee_wei: faker.string.alpha({length: {min: 10, max: 20}}), gas_price: faker.string.alpha({length: {min: 10, max: 20}}), gas_fee_eth: faker.string.alpha({length: {min: 10, max: 20}}), hash: faker.string.alpha({length: {min: 10, max: 20}}), from_address: faker.string.alpha({length: {min: 10, max: 20}}), gas_burned: faker.string.alpha({length: {min: 10, max: 20}}), block_number: faker.string.alpha({length: {min: 10, max: 20}}), token_in: faker.string.alpha({length: {min: 10, max: 20}}), gas_tipped: faker.string.alpha({length: {min: 10, max: 20}}), log_index: faker.number.int({min: undefined, max: undefined}), token_in_address: faker.string.alpha({length: {min: 10, max: 20}}), transaction_index: faker.number.int({min: undefined, max: undefined}), token_out: faker.string.alpha({length: {min: 10, max: 20}}), dex_name: faker.string.alpha({length: {min: 10, max: 20}}), token_out_address: faker.string.alpha({length: {min: 10, max: 20}}), amount_in: faker.string.alpha({length: {min: 10, max: 20}}), gas_used: faker.number.int({min: undefined, max: undefined})})), victims: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({to_address: faker.string.alpha({length: {min: 10, max: 20}}), amount_out: faker.string.alpha({length: {min: 10, max: 20}}), gas_fee_wei: faker.string.alpha({length: {min: 10, max: 20}}), gas_price: faker.string.alpha({length: {min: 10, max: 20}}), gas_fee_eth: faker.string.alpha({length: {min: 10, max: 20}}), hash: faker.string.alpha({length: {min: 10, max: 20}}), from_address: faker.string.alpha({length: {min: 10, max: 20}}), gas_burned: faker.string.alpha({length: {min: 10, max: 20}}), block_number: faker.string.alpha({length: {min: 10, max: 20}}), token_in: faker.string.alpha({length: {min: 10, max: 20}}), gas_tipped: faker.string.alpha({length: {min: 10, max: 20}}), log_index: faker.number.int({min: undefined, max: undefined}), token_in_address: faker.string.alpha({length: {min: 10, max: 20}}), transaction_index: faker.number.int({min: undefined, max: undefined}), token_out: faker.string.alpha({length: {min: 10, max: 20}}), dex_name: faker.string.alpha({length: {min: 10, max: 20}}), token_out_address: faker.string.alpha({length: {min: 10, max: 20}}), amount_in: faker.string.alpha({length: {min: 10, max: 20}}), gas_used: faker.number.int({min: undefined, max: undefined})})), back_run: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({to_address: faker.string.alpha({length: {min: 10, max: 20}}), amount_out: faker.string.alpha({length: {min: 10, max: 20}}), gas_fee_wei: faker.string.alpha({length: {min: 10, max: 20}}), gas_price: faker.string.alpha({length: {min: 10, max: 20}}), gas_fee_eth: faker.string.alpha({length: {min: 10, max: 20}}), hash: faker.string.alpha({length: {min: 10, max: 20}}), from_address: faker.string.alpha({length: {min: 10, max: 20}}), gas_burned: faker.string.alpha({length: {min: 10, max: 20}}), block_number: faker.string.alpha({length: {min: 10, max: 20}}), token_in: faker.string.alpha({length: {min: 10, max: 20}}), gas_tipped: faker.string.alpha({length: {min: 10, max: 20}}), log_index: faker.number.int({min: undefined, max: undefined}), token_in_address: faker.string.alpha({length: {min: 10, max: 20}}), transaction_index: faker.number.int({min: undefined, max: undefined}), token_out: faker.string.alpha({length: {min: 10, max: 20}}), dex_name: faker.string.alpha({length: {min: 10, max: 20}}), token_out_address: faker.string.alpha({length: {min: 10, max: 20}}), amount_in: faker.string.alpha({length: {min: 10, max: 20}}), gas_used: faker.number.int({min: undefined, max: undefined})}))}})), total_sandwiches: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})


export const getFetchBlocksBlocksGetMockHandler = (overrideResponse?: BlocksResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<BlocksResponse> | BlocksResponse)) => {
  return http.get('*/blocks/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getFetchBlocksBlocksGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetBlockByNumberBlocksNumberGetMockHandler = (overrideResponse?: BlockItem | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<BlockItem> | BlockItem)) => {
  return http.get('*/blocks/:number', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetBlockByNumberBlocksNumberGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getFetchSandwichesAttackByBlockNumberBlocksNumberSandwichGetMockHandler = (overrideResponse?: SingleSandwichResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<SingleSandwichResponse> | SingleSandwichResponse)) => {
  return http.get('*/blocks/:number/sandwich', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getFetchSandwichesAttackByBlockNumberBlocksNumberSandwichGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getFetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGetMockHandler = (overrideResponse?: MultipleSandwichResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MultipleSandwichResponse> | MultipleSandwichResponse)) => {
  return http.get('*/blocks/:number/multiple_sandwich', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getFetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getBlocksMock = () => [
  getFetchBlocksBlocksGetMockHandler(),
  getGetBlockByNumberBlocksNumberGetMockHandler(),
  getFetchSandwichesAttackByBlockNumberBlocksNumberSandwichGetMockHandler(),
  getFetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGetMockHandler()
]
