/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Mini Etherscan ***DEV***
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BlockItem,
  BlocksResponse,
  FetchBlocksBlocksGetParams,
  HTTPValidationError,
  MultipleSandwichResponse,
  SingleSandwichResponse
} from '../miniEtherscanDEV.schemas';

import { api } from '../../lib/axios';
import type { ErrorType } from '../../lib/axios';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Fetch the latests blocks.
 */
export const fetchBlocksBlocksGet = (
    params?: FetchBlocksBlocksGetParams,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<BlocksResponse>(
      {url: `/blocks/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getFetchBlocksBlocksGetQueryKey = (params?: FetchBlocksBlocksGetParams,) => {
    return [`/blocks/`, ...(params ? [params]: [])] as const;
    }

    
export const getFetchBlocksBlocksGetQueryOptions = <TData = Awaited<ReturnType<typeof fetchBlocksBlocksGet>>, TError = ErrorType<void | HTTPValidationError>>(params?: FetchBlocksBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchBlocksBlocksGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFetchBlocksBlocksGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof fetchBlocksBlocksGet>>> = ({ signal }) => fetchBlocksBlocksGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof fetchBlocksBlocksGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FetchBlocksBlocksGetQueryResult = NonNullable<Awaited<ReturnType<typeof fetchBlocksBlocksGet>>>
export type FetchBlocksBlocksGetQueryError = ErrorType<void | HTTPValidationError>


export function useFetchBlocksBlocksGet<TData = Awaited<ReturnType<typeof fetchBlocksBlocksGet>>, TError = ErrorType<void | HTTPValidationError>>(
 params: undefined |  FetchBlocksBlocksGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchBlocksBlocksGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchBlocksBlocksGet>>,
          TError,
          Awaited<ReturnType<typeof fetchBlocksBlocksGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFetchBlocksBlocksGet<TData = Awaited<ReturnType<typeof fetchBlocksBlocksGet>>, TError = ErrorType<void | HTTPValidationError>>(
 params?: FetchBlocksBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchBlocksBlocksGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchBlocksBlocksGet>>,
          TError,
          Awaited<ReturnType<typeof fetchBlocksBlocksGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFetchBlocksBlocksGet<TData = Awaited<ReturnType<typeof fetchBlocksBlocksGet>>, TError = ErrorType<void | HTTPValidationError>>(
 params?: FetchBlocksBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchBlocksBlocksGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Fetch the latests blocks.
 */

export function useFetchBlocksBlocksGet<TData = Awaited<ReturnType<typeof fetchBlocksBlocksGet>>, TError = ErrorType<void | HTTPValidationError>>(
 params?: FetchBlocksBlocksGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchBlocksBlocksGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFetchBlocksBlocksGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Search for a block by number.
 */
export const getBlockByNumberBlocksNumberGet = (
    number: number,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<BlockItem>(
      {url: `/blocks/${number}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBlockByNumberBlocksNumberGetQueryKey = (number: number,) => {
    return [`/blocks/${number}`] as const;
    }

    
export const getGetBlockByNumberBlocksNumberGetQueryOptions = <TData = Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>, TError = ErrorType<void | HTTPValidationError>>(number: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBlockByNumberBlocksNumberGetQueryKey(number);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>> = ({ signal }) => getBlockByNumberBlocksNumberGet(number, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBlockByNumberBlocksNumberGetQueryResult = NonNullable<Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>>
export type GetBlockByNumberBlocksNumberGetQueryError = ErrorType<void | HTTPValidationError>


export function useGetBlockByNumberBlocksNumberGet<TData = Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>, TError = ErrorType<void | HTTPValidationError>>(
 number: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>,
          TError,
          Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBlockByNumberBlocksNumberGet<TData = Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>, TError = ErrorType<void | HTTPValidationError>>(
 number: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>,
          TError,
          Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBlockByNumberBlocksNumberGet<TData = Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>, TError = ErrorType<void | HTTPValidationError>>(
 number: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Search for a block by number.
 */

export function useGetBlockByNumberBlocksNumberGet<TData = Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>, TError = ErrorType<void | HTTPValidationError>>(
 number: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBlockByNumberBlocksNumberGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBlockByNumberBlocksNumberGetQueryOptions(number,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Search for sandwiches attack on the specific block.
 */
export const fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet = (
    number: number,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<SingleSandwichResponse>(
      {url: `/blocks/${number}/sandwich`, method: 'GET', signal
    },
      options);
    }
  

export const getFetchSandwichesAttackByBlockNumberBlocksNumberSandwichGetQueryKey = (number: number,) => {
    return [`/blocks/${number}/sandwich`] as const;
    }

    
export const getFetchSandwichesAttackByBlockNumberBlocksNumberSandwichGetQueryOptions = <TData = Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>, TError = ErrorType<void | HTTPValidationError>>(number: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFetchSandwichesAttackByBlockNumberBlocksNumberSandwichGetQueryKey(number);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>> = ({ signal }) => fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet(number, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FetchSandwichesAttackByBlockNumberBlocksNumberSandwichGetQueryResult = NonNullable<Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>>
export type FetchSandwichesAttackByBlockNumberBlocksNumberSandwichGetQueryError = ErrorType<void | HTTPValidationError>


export function useFetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet<TData = Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>, TError = ErrorType<void | HTTPValidationError>>(
 number: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>,
          TError,
          Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet<TData = Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>, TError = ErrorType<void | HTTPValidationError>>(
 number: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>,
          TError,
          Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet<TData = Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>, TError = ErrorType<void | HTTPValidationError>>(
 number: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Search for sandwiches attack on the specific block.
 */

export function useFetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet<TData = Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>, TError = ErrorType<void | HTTPValidationError>>(
 number: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchSandwichesAttackByBlockNumberBlocksNumberSandwichGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFetchSandwichesAttackByBlockNumberBlocksNumberSandwichGetQueryOptions(number,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Search for multi laired sandwiches attack on the specific block.
 */
export const fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet = (
    number: number,
 options?: SecondParameter<typeof api>,signal?: AbortSignal
) => {
      
      
      return api<MultipleSandwichResponse>(
      {url: `/blocks/${number}/multiple_sandwich`, method: 'GET', signal
    },
      options);
    }
  

export const getFetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGetQueryKey = (number: number,) => {
    return [`/blocks/${number}/multiple_sandwich`] as const;
    }

    
export const getFetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGetQueryOptions = <TData = Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>, TError = ErrorType<void | HTTPValidationError>>(number: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGetQueryKey(number);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>> = ({ signal }) => fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet(number, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(number), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGetQueryResult = NonNullable<Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>>
export type FetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGetQueryError = ErrorType<void | HTTPValidationError>


export function useFetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet<TData = Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>, TError = ErrorType<void | HTTPValidationError>>(
 number: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>,
          TError,
          Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet<TData = Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>, TError = ErrorType<void | HTTPValidationError>>(
 number: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>,
          TError,
          Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet<TData = Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>, TError = ErrorType<void | HTTPValidationError>>(
 number: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Search for multi laired sandwiches attack on the specific block.
 */

export function useFetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet<TData = Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>, TError = ErrorType<void | HTTPValidationError>>(
 number: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGet>>, TError, TData>>, request?: SecondParameter<typeof api>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFetchDetectMultiLayeredBurgerSandwichesByBlockNumberBlocksNumberMultipleSandwichGetQueryOptions(number,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



